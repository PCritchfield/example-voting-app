pipeline {
    agent none

    stages{
        stage('build'){
            agent{
                docker{
                    image 'maven:3.8.6-openjdk-18-slim'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            when{
                changeset "**/worker/**"
            }
            steps{
                echo "Compile the worker app"
                dir ('worker'){
                    sh 'mvn compile'
                }
            }
        }
        stage('test'){
            agent{
                docker{
                    image 'maven:3.8.6-openjdk-18-slim'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            when{
                changeset "**/worker/**"
            }
            steps{
                echo "Run Unit Tests on Worker app"
                dir ('worker'){
                    sh 'mvn clean test'
                }
            }
        }
        stage('package'){
            agent{
                docker{
                    image 'maven:3.8.6-openjdk-18-slim'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            when{
                branch 'master'
                changeset "**/worker/**"
            }
            steps{
                echo "package the worker app"
                dir ('worker'){
                    sh 'mvn package -DskipTests'
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
                }
            }
        }
        stage('docker-package'){
            agent any
            when{
                // branch 'master'
                changeset "**/worker/**"
            }
            steps{
                echo "package the worker app with docker"
                script{
                    docker.withRegistry('https://index.docker.io/v1', 'dockerlogin'){
                       def workerImage = docker.build("philjim/worker:${env.BUILD_ID}","./worker")
                       workerImage.push()
                       workerImage.push("${env.BRANCH_NAME}")
                    }
                }
            }
        }
    }

    post{
        always{
            echo "build pipeline completed"
        }
    }
}